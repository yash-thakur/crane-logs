generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
}

model EntryLog {
  id Int @id @default(autoincrement())
  logSheetNo Int
  date    DateTime  @default(now())
  customer Customer @relation(fields: [customerId], references: [id])
  customerId Int
  inTime  String 
  outTime String
  break String
  vehicle Vehicle @relation(fields: [vehicleNo], references: [registrationNumber])
  vehicleNo String
  driverName        String
  driver            Driver            @relation(fields: [driverName], references: [fullName])
  amount  Float
  advance Float?
  workDetails String? @db.VarChar(500)
  paymentStatus     PaymentStatus
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  inwardPayments    InwardPayment[]
  deletedAt DateTime?
}

enum PaymentStatus {
  PENDING
  PARTIALLY_PAID
  PAID
}

model Customer {
  id        Int      @id @default(autoincrement())
  name  String @unique
  contactPerson String?
  openingBalance Float?  @default(0)
  phoneNumber String?
  address String? @db.VarChar(500)
  gstin String? @unique
  email String?
  entryLogs EntryLog[]
  isActive        Boolean   @default(true)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  inwardPayments  InwardPayment[]
  deletedAt DateTime?
}

model Driver {
  id  Int      @id @default(autoincrement())
  fullName          String             @unique
  licenseNumber   String?   @unique
  dateOfBirth     DateTime
  phoneNumber     String
  address         String?
  licenseExpiry   DateTime
  vehicleType     String
  yearsOfExperience Int
  isActive        Boolean  @default(true)
  salary Int?
  aadhar Int
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  expenses DailyExpense[]
  entryLogs EntryLog[]
  deletedAt DateTime?
}

model Vehicle {
  id  Int      @id @default(autoincrement())
  registrationNumber   String   @unique
  make                 String
  model                String
  year                 Int
  vehicleType          String
  capacity             Float
  fuelType             String
  lastMaintenanceDate  DateTime?
  nextMaintenanceDate  DateTime?
  insuranceNumber      String
  insuranceExpiryDate  DateTime
  isActive             Boolean  @default(true)
  type String
  puc DateTime?
  fitness DateTime?
  tax DateTime?
  form10  DateTime?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  entryLogs EntryLog[]
  expenses DailyExpense[]
  deletedAt DateTime?
}


model ExpenseCategory {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  expenses    DailyExpense[]
  deletedAt DateTime?
}

model DailyExpense {
  id                Int               @id @default(autoincrement())
  date              DateTime
  amount            Float
  description       String?
  categoryId        Int
  category          ExpenseCategory   @relation(fields: [categoryId], references: [id])
  paymentMethod     PaymentMethod
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  driverId          Int?
  driver            Driver?          @relation(fields: [driverId], references: [id])
  vehicleId         Int?
  vehicle           Vehicle? @relation(fields: [vehicleId], references: [id])
  deletedAt DateTime?
}

model InwardPayment {
  id                Int           @id @default(autoincrement())
  customerId        Int
  customer          Customer      @relation(fields: [customerId], references: [id])
  entryLogId        Int?
  entryLog          EntryLog?     @relation(fields: [entryLogId], references: [id])
  amount            Float
  paymentDate       DateTime
  paymentMethod     PaymentMethod
  referenceNumber   String?       // e.g., cheque number, transaction ID
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  deletedAt DateTime?
}

enum PaymentMethod {
  CASH
  CHEQUE
  BANK_TRANSFER
  UPI
  CREDIT_CARD
  DEBIT_CARD
  MOBILE_WALLET
}


